// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// normal_pdf
double normal_pdf(double x, double m, double s);
RcppExport SEXP _mintMR_normal_pdf(SEXP xSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(x, m, s));
    return rcpp_result_gen;
END_RCPP
}
// get_opts
List get_opts(int L, Nullable<NumericVector> a_gamma, Nullable<NumericVector> b_gamma, Nullable<NumericVector> a_alpha, Nullable<NumericVector> b_alpha, Nullable<NumericVector> a_beta, Nullable<NumericVector> b_beta, Nullable<double> a, Nullable<double> b, Nullable<int> maxIter, Nullable<int> thin, Nullable<int> burnin);
RcppExport SEXP _mintMR_get_opts(SEXP LSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP a_betaSEXP, SEXP b_betaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP maxIterSEXP, SEXP thinSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a_beta(a_betaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type b_beta(b_betaSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type b(bSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(get_opts(L, a_gamma, b_gamma, a_alpha, b_alpha, a_beta, b_beta, a, b, maxIter, thin, burnin));
    return rcpp_result_gen;
END_RCPP
}
// fastSigLm
List fastSigLm(const arma::vec& y, const arma::mat& X);
RcppExport SEXP _mintMR_fastSigLm(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSigLm(y, X));
    return rcpp_result_gen;
END_RCPP
}
// mintMR_LD
List mintMR_LD(const List& gammah, const List& Gammah, const List& se1, const List& se2, const List corr_mat, const List group, const List& opts, bool display_progress, int CC, int PC1, int PC2);
RcppExport SEXP _mintMR_mintMR_LD(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP corr_matSEXP, SEXP groupSEXP, SEXP optsSEXP, SEXP display_progressSEXP, SEXP CCSEXP, SEXP PC1SEXP, SEXP PC2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< const List& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< const List >::type corr_mat(corr_matSEXP);
    Rcpp::traits::input_parameter< const List >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const List& >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< int >::type PC1(PC1SEXP);
    Rcpp::traits::input_parameter< int >::type PC2(PC2SEXP);
    rcpp_result_gen = Rcpp::wrap(mintMR_LD(gammah, Gammah, se1, se2, corr_mat, group, opts, display_progress, CC, PC1, PC2));
    return rcpp_result_gen;
END_RCPP
}
// mintMR_LD_Sample_Overlap
List mintMR_LD_Sample_Overlap(const List& gammah, const List& Gammah, const List& se1, const List& se2, const List corr_mat, const List group, const List& opts, const arma::mat& Lambda, bool display_progress, int CC, int PC1, int PC2);
RcppExport SEXP _mintMR_mintMR_LD_Sample_Overlap(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP corr_matSEXP, SEXP groupSEXP, SEXP optsSEXP, SEXP LambdaSEXP, SEXP display_progressSEXP, SEXP CCSEXP, SEXP PC1SEXP, SEXP PC2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< const List& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< const List >::type corr_mat(corr_matSEXP);
    Rcpp::traits::input_parameter< const List >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const List& >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< int >::type PC1(PC1SEXP);
    Rcpp::traits::input_parameter< int >::type PC2(PC2SEXP);
    rcpp_result_gen = Rcpp::wrap(mintMR_LD_Sample_Overlap(gammah, Gammah, se1, se2, corr_mat, group, opts, Lambda, display_progress, CC, PC1, PC2));
    return rcpp_result_gen;
END_RCPP
}
// mintMR
List mintMR(const List& gammah, const List& Gammah, const List& se1, const List& se2, const List group, Nullable<List> opts, Nullable<List> corr_mat, Nullable<arma::mat> Lambda, int CC, int PC1, int PC2, bool display_progress);
RcppExport SEXP _mintMR_mintMR(SEXP gammahSEXP, SEXP GammahSEXP, SEXP se1SEXP, SEXP se2SEXP, SEXP groupSEXP, SEXP optsSEXP, SEXP corr_matSEXP, SEXP LambdaSEXP, SEXP CCSEXP, SEXP PC1SEXP, SEXP PC2SEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type gammah(gammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type Gammah(GammahSEXP);
    Rcpp::traits::input_parameter< const List& >::type se1(se1SEXP);
    Rcpp::traits::input_parameter< const List& >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< const List >::type group(groupSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type corr_mat(corr_matSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< int >::type PC1(PC1SEXP);
    Rcpp::traits::input_parameter< int >::type PC2(PC2SEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(mintMR(gammah, Gammah, se1, se2, group, opts, corr_mat, Lambda, CC, PC1, PC2, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mintMR_normal_pdf", (DL_FUNC) &_mintMR_normal_pdf, 3},
    {"_mintMR_get_opts", (DL_FUNC) &_mintMR_get_opts, 12},
    {"_mintMR_fastSigLm", (DL_FUNC) &_mintMR_fastSigLm, 2},
    {"_mintMR_mintMR_LD", (DL_FUNC) &_mintMR_mintMR_LD, 11},
    {"_mintMR_mintMR_LD_Sample_Overlap", (DL_FUNC) &_mintMR_mintMR_LD_Sample_Overlap, 12},
    {"_mintMR_mintMR", (DL_FUNC) &_mintMR_mintMR, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_mintMR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
